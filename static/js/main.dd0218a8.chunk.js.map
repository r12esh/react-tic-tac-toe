{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","player","className","itemArray","Array","fill","App","indexOf","useState","isX","setIsX","winMessage","setWinMessage","changeItem","itemNumber","toast","type","position","onClick","map","item","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAaeA,EAVF,SAAC,GACZ,OADwB,EAAXC,QAEX,IAAK,IACH,OAAO,cAAC,IAAD,CAASC,UAAU,SAC5B,IAAK,IACH,OAAO,cAAC,IAAD,CAAaA,UAAU,SAChC,QACE,OAAO,cAAC,IAAD,CAAOA,UAAU,W,eCHxBC,G,MAAY,IAAIC,MAAM,GAAGC,KAAK,UA+GrBC,GA9GIH,EAAUI,QAAQ,SAEzB,WAEV,MAAsBC,oBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAyDMC,EAAa,SAACC,GAClB,MAA8B,UAA1BX,EAAUW,GAILC,YAAM,eAAgB,CAAEC,KAAM,WAHrCb,EAAUW,GAAcL,EAAM,IAAM,IACpCC,GAAQD,GAIKN,EAAUI,QAAQ,SACd,GACjBK,EAAc,SAEZD,EACKI,YAAMJ,EAAY,CAAEK,KAAM,iBA3D/Bb,EAAU,KAAOA,EAAU,IAC7BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YACJA,EAAU,KAAOA,EAAU,IACpCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YACJA,EAAU,KAAOA,EAAU,IACpCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YAGNA,EAAU,KAAOA,EAAU,IAClCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YACJA,EAAU,KAAOA,EAAU,IACpCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YACJA,EAAU,KAAOA,EAAU,IACpCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YAGNA,EAAU,KAAOA,EAAU,IAClCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,YACJA,EAAU,KAAOA,EAAU,IACpCA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,IAEVS,EAAc,GAAD,OAAIT,EAAU,GAAd,eAqBjB,OACE,sBAAKD,UAAU,YAAf,UACE,cAAC,IAAD,CAAgBe,SAAS,aACzB,8BACGN,EACC,gCACE,oBAAIT,UAAU,UAAd,SACGS,IAEH,wBAAQT,UAAU,YAAYgB,QAjFrB,WACjBR,GAAO,GACPE,EAAc,IACdT,EAAUE,KAAK,QAAS,EAAG,IA8EnB,2BAKF,qBAAIH,UAAU,UAAd,UACGO,EAAM,IAAM,IADf,eAKJ,qBAAKP,UAAU,OAAf,SAEIC,EAAUgB,KAAI,SAACC,EAAMC,GAAP,OACZ,qBAAKH,QAAS,kBAAML,EAAWQ,IAAQnB,UAAU,gBAAjD,SACE,cAAC,EAAD,CAAMD,OAAQmB,gBClGbE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd0218a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes, FaPen, FaRegCircle} from 'react-icons/fa';\r\n\r\nconst Icon = ({player})=> {\r\n  switch (player) {\r\n    case \"X\":\r\n      return <FaTimes className=\"icon\" />\r\n    case \"O\":\r\n      return <FaRegCircle className=\"icon\" />\r\n    default:\r\n      return <FaPen className=\"icon\" />\r\n  }\r\n}\r\nexport default Icon;","import React, { useState } from 'react'\nimport Icon from './components/Icon'\nimport './App.css';\nimport { toast, ToastContainer } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nconst itemArray = new Array(9).fill('empty');\nvar indexOfEmpty = itemArray.indexOf('empty');\n\nconst App = () => {\n\n  const [isX, setIsX] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsX(false);\n    setWinMessage(\"\");\n    itemArray.fill('empty', 0, 9)\n  }\n\n  const checkWinner = () => {\n    // Row Wins !\n    if (itemArray[0] === itemArray[1] &&\n      itemArray[1] === itemArray[2] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} Wins !`)\n    } else if (itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5] &&\n      itemArray[3] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[3]} Wins !`)\n    } else if (itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8] &&\n      itemArray[6] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[6]} Wins !`)\n    }\n    // Column Wins !\n    else if (itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} Wins !`)\n    } else if (itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7] &&\n      itemArray[1] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[1]} Wins !`)\n    } else if (itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8] &&\n      itemArray[2] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[2]} Wins !`)\n    }\n    // diagonal Wins !\n    else if (itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} Wins !`)\n    } else if (itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6] &&\n      itemArray[2] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[2]} Wins !`)\n    }\n  }\n\n  const changeItem = (itemNumber) => {\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isX ? \"X\" : \"O\"\n      setIsX(!isX);\n    } else {\n      return toast(\"Filled Place\", { type: \"error\" })\n    }\n    indexOfEmpty = itemArray.indexOf(\"empty\");\n    if (indexOfEmpty < 0) {\n      setWinMessage(\"DRAW!\");\n    }\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n    checkWinner();\n  }\n\n  return (\n    <div className=\"container\">\n      <ToastContainer position=\"top-left\" />\n      <div>\n        {winMessage ? (\n          <div>\n            <h1 className=\"turnMsg\">\n              {winMessage}\n            </h1>\n            <button className=\"reloadBtn\" onClick={reloadGame}>          \n              Reset Game   \n            </button>\n          </div>\n        ) : (\n          <h1 className=\"turnMsg\">\n            {isX ? \"X\" : \"O\"}'s Turn\n          </h1>\n        )}\n      </div>\n      <div className=\"grid\">\n        {\n          itemArray.map((item, index) => (\n            <div onClick={() => changeItem(index)} className=\"iconContanier\">\n              <Icon player={item} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}